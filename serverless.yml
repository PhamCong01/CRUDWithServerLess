# serverless.yml
service: my-first-serverless
provider:
  name: aws
  runtime: nodejs14.x
  stage: dev
  region: ap-northeast-1
  environment:
    DYNAMODB_TABLE_NAME: ${self:custom.postsTableName}

custom: 
  postsTableName: posts-table-${self:provider.stage}

plugins:
  - serverless-iam-roles-per-function

functions:
  app:
    handler: index.handler
    events:
      - http: ANY /
      - http: 'ANY {proxy+}'
  getPost:
    handler: index.getPost
    name: get-post
    memorySize: 128 #mb
    timeout: 5 #seconds
    events:
      - http: 
          path: post/{postId}
          method: GET
    iamRoleStatements: 
      - Effect: "Allow"
        Action:
          - "dynamodb:GetItem"
        Resource: !GetAtt PostsTable.Arn
  
  createPost:
    handler: index.createPost
    name: create-post
    memorySize: 128 #mb
    timeout: 5 #seconds
    events: 
      - http:
          path: post/createPost
          method: POST
      iamRoleStatements:
        - Effect: "Allow"
          Action:
            - "dynamodb:PutItem"
          Resource: !GetAtt PostsTable.Arn
  updatePost:
    handler: index.updatePost
    name: update-post
    memorySize: 128 #mb
    timeout: 5 #seconds
    events: 
      - http:
          path: post/{postId}
          method: PUT
      iamRoleStatements:
        - Effect: "Allow"
          Action:
            - "dynamodb:PutItem"
          Resource: !GetAtt PostsTable.Arn
  deletePost:
    handler: index.deletePost
    name: delete-post
    memorySize: 128 #mb
    timeout: 5 #seconds
    events: 
      - http:
          path: post/{postId}
          method: DELETE
      iamRoleStatements:
        - Effect: "Allow"
          Action:
            - "dynamodb:DeleteItem"
          Resource: !GetAtt PostsTable.Arn
  getPosts:
    handler: index.getPosts
    name: get-posts
    memorySize: 128 #mb
    timeout: 5 #seconds
    events: 
      - http:
          path: posts
          method: GET
      iamRoleStatements:
        - Effect: "Allow"
          Action:
            - "dynamodb:Scan"
          Resource: !GetAtt PostsTable.Arn

resources:
  Resources: 
    PostsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.postsTableName}
        AttributeDefinition: 
          - AttributeName: postId
            AttributeType: S
        KeySchema: 
          - AttributeName: postId
            KeyType: HASH
        ProvisionedThroughput: 
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
          
